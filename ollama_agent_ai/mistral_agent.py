#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Mistral Agent - Un assistant IA pour terminal Linux
Utilise le mod√®le Mistral pour assister dans les t√¢ches DevOps et SysAdmin
"""

import os
import sys
import re
import json
import logging
import readline
import subprocess
import requests
from datetime import datetime
import argparse
from typing import List, Dict, Any, Optional, Tuple
import shlex
import signal

# Biblioth√®ques pour l'interface
try:
    from rich.console import Console
    from rich.markdown import Markdown
    from rich.panel import Panel
    from rich.prompt import Prompt, Confirm
    from rich.syntax import Syntax
    from rich import box
    import typer
    HAS_RICH = True
except ImportError:
    HAS_RICH = False
    print("Pour une meilleure exp√©rience visuelle, installez rich et typer: pip install rich typer")

# Param√®tres constants
API_KEY = "n46jy69eatOFdxAI7Rb0PXsj6jrVv16K"
API_URL = "https://api.mistral.ai/v1/chat/completions"
MODEL = "mistral-large-latest"
SCRIPTS_DIR = os.path.expanduser("~/tech/scripts")
LOG_FILE = os.path.expanduser("~/.ia_agent_logs.log")
HISTORY_FILE = os.path.expanduser("~/.ia_agent_history.json")
MAX_HISTORY_ENTRIES = 20
DANGEROUS_COMMANDS = ["rm", "mv", "dd", "mkfs", "fdisk", ">", "2>", "truncate", "rmdir", "pkill", "kill"]

# Initialisation du logging
logging.basicConfig(
    filename=LOG_FILE,
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# Classe principale de l'agent
class MistralAgent:
    def __init__(self, language="fr", debug=False):
        # Cr√©ation du r√©pertoire pour les scripts s'il n'existe pas
        os.makedirs(SCRIPTS_DIR, exist_ok=True)
        
        self.debug = debug
        self.language = language
        self.console = Console() if HAS_RICH else None
        self.conversation_history = []
        self.load_history()
        self.setup_signal_handlers()
        
        # Message syst√®me initial qui explique le r√¥le de l'agent
        self.system_message = """
Tu es un agent IA bas√© sur le mod√®le Mistral, con√ßu pour assister dans les t√¢ches Linux et DevOps.
Tu dois √™tre concis, pr√©cis et aider l'utilisateur √† ex√©cuter des t√¢ches dans un terminal Linux.
Tu peux ex√©cuter des commandes shell, cr√©er des scripts (Bash, Python, YAML, etc.).

Voici comment tu dois r√©pondre:
1. Pour une commande √† ex√©cuter directement: [EXEC] commande [/EXEC]
2. Pour cr√©er un script: [SCRIPT type nom_fichier] contenu [/SCRIPT]
3. Pour du texte normal: R√©ponds simplement sans aucun tag sp√©cial

N'utilise pas de formatage markdown complexe. Sois concis.
Pour les commandes dangereuses (rm, mv, etc.), avertis l'utilisateur d'abord.
"""
        # Personnalisation selon la langue
        self.prompt_text = "ü§ñ Mistral@Ubuntu $ " if language == "fr" else "ü§ñ Mistral@Ubuntu $ "

    def setup_signal_handlers(self):
        """Configure les gestionnaires de signaux pour une sortie propre"""
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
    
    def signal_handler(self, sig, frame):
        """G√®re les signaux d'interruption"""
        print("\nFermeture propre de l'agent Mistral...")
        self.save_history()
        sys.exit(0)

    def load_history(self):
        """Charge l'historique des conversations"""
        if os.path.exists(HISTORY_FILE):
            try:
                with open(HISTORY_FILE, 'r', encoding='utf-8') as f:
                    self.conversation_history = json.load(f)
                    # Limiter la taille de l'historique
                    if len(self.conversation_history) > MAX_HISTORY_ENTRIES:
                        self.conversation_history = self.conversation_history[-MAX_HISTORY_ENTRIES:]
            except Exception as e:
                logging.error(f"Erreur lors du chargement de l'historique: {e}")
                self.conversation_history = []
    
    def save_history(self):
        """Sauvegarde l'historique des conversations"""
        try:
            with open(HISTORY_FILE, 'w', encoding='utf-8') as f:
                json.dump(self.conversation_history, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logging.error(f"Erreur lors de la sauvegarde de l'historique: {e}")

    def get_prompt(self):
        """Affiche le prompt personnalis√©"""
        if HAS_RICH:
            return self.console.input(f"[bold cyan]{self.prompt_text}[/bold cyan]")
        else:
            return input(self.prompt_text)

    def is_dangerous_command(self, command):
        """V√©rifie si une commande est potentiellement dangereuse"""
        command_parts = shlex.split(command)
        if not command_parts:
            return False
            
        base_cmd = command_parts[0]
        
        # V√©rifier les commandes dangereuses directes
        if base_cmd in DANGEROUS_COMMANDS:
            return True
            
        # V√©rifier les redirections et pipes dangereux
        if ">" in command or "|" in command and ("rm" in command or "mv" in command):
            return True
            
        # V√©rifier les options dangereuses sp√©cifiques
        if base_cmd == "rm" and "-rf" in command_parts:
            return True
            
        return False

    def execute_command(self, command):
        """Ex√©cute une commande shell et retourne le r√©sultat"""
        logging.info(f"Ex√©cution de la commande: {command}")
        
        if self.is_dangerous_command(command):
            if HAS_RICH:
                confirm = Confirm.ask(f"[bold red]‚ö†Ô∏è Commande potentiellement dangereuse: [/bold red][yellow]{command}[/yellow]. Confirmer l'ex√©cution?")
            else:
                confirm = input(f"‚ö†Ô∏è Commande potentiellement dangereuse: {command}. Confirmer l'ex√©cution? [o/N] ").lower() == 'o'
            
            if not confirm:
                return "Commande annul√©e par l'utilisateur."
        
        try:
            process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            stdout, stderr = process.communicate()
            
            result = stdout.decode('utf-8')
            error = stderr.decode('utf-8')
            
            if process.returncode != 0:
                return f"Erreur (code {process.returncode}):\n{error}"
            else:
                return result
        except Exception as e:
            logging.error(f"Erreur lors de l'ex√©cution de la commande: {e}")
            return f"Erreur: {str(e)}"

    def save_script(self, script_type, filename, content):
        """Sauvegarde un script g√©n√©r√© dans le r√©pertoire appropri√©"""
        # D√©termination de l'extension appropri√©e
        extensions = {
            "python": ".py",
            "bash": ".sh",
            "shell": ".sh",
            "yaml": ".yaml",
            "yml": ".yml",
            "docker": ".dockerfile",
            "dockerfile": ".dockerfile",
            "terraform": ".tf",
            "json": ".json",
            "js": ".js",
            "ansible": ".yml",
            "php": ".php",
            "ruby": ".rb",
            "go": ".go",
            "java": ".java",
            "c": ".c",
            "cpp": ".cpp",
            "csharp": ".cs",
            "sql": ".sql",
        }
        
        # V√©rification si le nom de fichier a d√©j√† une extension
        has_extension = "." in filename
        
        # Si pas d'extension et qu'on a un type connu, ajouter l'extension
        if not has_extension and script_type.lower() in extensions:
            filename = filename + extensions[script_type.lower()]
            
        # Chemin complet du fichier
        filepath = os.path.join(SCRIPTS_DIR, filename)
        
        # Sauvegarde du fichier
        try:
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(content)
            
            # Rendre ex√©cutable les scripts shell et python
            if script_type.lower() in ["bash", "shell", "python"]:
                os.chmod(filepath, 0o755)
                
            logging.info(f"Script {script_type} sauvegard√©: {filepath}")
            return filepath
        except Exception as e:
            logging.error(f"Erreur lors de la sauvegarde du script: {e}")
            return f"Erreur lors de la sauvegarde: {str(e)}"

    def call_mistral_api(self, user_message):
        """Appelle l'API Mistral pour obtenir une r√©ponse"""
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {API_KEY}"
        }
        
        # Pr√©parer les messages pour l'API
        messages = [
            {"role": "system", "content": self.system_message}
        ]
        
        # Ajouter l'historique de conversation
        for entry in self.conversation_history:
            messages.append(entry)
            
        # Ajouter le message de l'utilisateur
        messages.append({"role": "user", "content": user_message})
        
        payload = {
            "model": MODEL,
            "messages": messages,
            "temperature": 0.7,
            "max_tokens": 4000
        }
        
        try:
            response = requests.post(API_URL, headers=headers, json=payload)
            
            if response.status_code == 200:
                response_data = response.json()
                if self.debug:
                    print(json.dumps(response_data, indent=2))
                    
                assistant_message = response_data['choices'][0]['message']['content']
                
                # Mettre √† jour l'historique de conversation
                self.conversation_history.append({"role": "user", "content": user_message})
                self.conversation_history.append({"role": "assistant", "content": assistant_message})
                
                # Limiter la taille de l'historique
                if len(self.conversation_history) > MAX_HISTORY_ENTRIES * 2:
                    self.conversation_history = self.conversation_history[-MAX_HISTORY_ENTRIES * 2:]
                    
                return assistant_message
            else:
                error_message = f"Erreur API ({response.status_code}): {response.text}"
                logging.error(error_message)
                return f"Erreur lors de l'appel √† l'API Mistral: {error_message}"
        except Exception as e:
            logging.error(f"Exception lors de l'appel √† l'API: {str(e)}")
            return f"Erreur de connexion √† l'API Mistral: {str(e)}"

    def process_response(self, response):
        """Traite la r√©ponse de l'API pour ex√©cuter des commandes ou cr√©er des scripts"""
        # Rechercher les commandes √† ex√©cuter
        exec_pattern = r"\[EXEC\](.*?)\[\/EXEC\]"
        script_pattern = r"\[SCRIPT\s+(\w+)\s+([^\]]+)\](.*?)\[\/SCRIPT\]"
        
        # Ex√©cution des commandes
        for match in re.finditer(exec_pattern, response, re.DOTALL):
            command = match.group(1).strip()
            result = self.execute_command(command)
            
            if HAS_RICH:
                self.console.print("\n[bold green]Commande:[/bold green]")
                self.console.print(Syntax(command, "bash"))
                self.console.print("\n[bold green]R√©sultat:[/bold green]")
                self.console.print(result)
            else:
                print(f"\nCommande: {command}")
                print(f"R√©sultat: {result}")
        
        # Cr√©ation de scripts
        for match in re.finditer(script_pattern, response, re.DOTALL):
            script_type = match.group(1).strip()
            script_name = match.group(2).strip()
            script_content = match.group(3).strip()
            
            filepath = self.save_script(script_type, script_name, script_content)
            
            if HAS_RICH:
                self.console.print(f"\n[bold green]Script {script_type} cr√©√©:[/bold green] {filepath}")
                self.console.print(Syntax(script_content, script_type.lower()))
                
                # Demander si l'utilisateur veut ex√©cuter le script
                if script_type.lower() in ["bash", "shell", "python"]:
                    if Confirm.ask("Voulez-vous ex√©cuter ce script maintenant?"):
                        if script_type.lower() == "python":
                            cmd = f"python3 {filepath}"
                        else:
                            cmd = filepath
                            
                        result = self.execute_command(cmd)
                        self.console.print("\n[bold green]R√©sultat de l'ex√©cution:[/bold green]")
                        self.console.print(result)
            else:
                print(f"\nScript {script_type} cr√©√©: {filepath}")
                print(f"\n--- D√©but du script ---\n{script_content}\n--- Fin du script ---")
                
                # Demander si l'utilisateur veut ex√©cuter le script
                if script_type.lower() in ["bash", "shell", "python"]:
                    if input("Voulez-vous ex√©cuter ce script maintenant? [o/N] ").lower() == 'o':
                        if script_type.lower() == "python":
                            cmd = f"python3 {filepath}"
                        else:
                            cmd = filepath
                            
                        result = self.execute_command(cmd)
                        print(f"\nR√©sultat de l'ex√©cution:\n{result}")
        
        # Afficher le texte normal (sans les tags sp√©ciaux)
        clean_response = re.sub(exec_pattern, "", response)
        clean_response = re.sub(script_pattern, "", clean_response)
        clean_response = clean_response.strip()
        
        if clean_response:
            if HAS_RICH:
                self.console.print(Panel(clean_response, border_style="cyan", box=box.ROUNDED))
            else:
                print(f"\n{clean_response}\n")

    def run(self):
        """D√©marre la boucle principale de l'agent"""
        if HAS_RICH:
            self.console.print(Panel.fit(
                "[bold cyan]Agent IA Mistral[/bold cyan] - Assistant DevOps et SysAdmin",
                border_style="cyan",
                box=box.DOUBLE_EDGE
            ))
            self.console.print(f"[bold]Langue:[/bold] {self.language} | [bold]R√©pertoire des scripts:[/bold] {SCRIPTS_DIR}")
            self.console.print("[bold]Tapez 'exit' ou 'quit' pour quitter, 'clear' pour effacer l'√©cran[/bold]\n")
        else:
            print("====== Agent IA Mistral - Assistant DevOps et SysAdmin ======")
            print(f"Langue: {self.language} | R√©pertoire des scripts: {SCRIPTS_DIR}")
            print("Tapez 'exit' ou 'quit' pour quitter, 'clear' pour effacer l'√©cran\n")

        # Boucle principale
        while True:
            try:
                user_input = self.get_prompt()
                
                # Commandes sp√©ciales
                if user_input.lower() in ['exit', 'quit']:
                    self.save_history()
                    break
                elif user_input.lower() == 'clear':
                    os.system('clear')
                    continue
                elif not user_input.strip():
                    continue
                
                # Appel √† l'API Mistral
                assistant_response = self.call_mistral_api(user_input)
                
                # Traitement de la r√©ponse
                self.process_response(assistant_response)
                
                # Sauvegarde p√©riodique de l'historique
                self.save_history()
                
            except KeyboardInterrupt:
                print("\nInterruption d√©tect√©e. Pour quitter, tapez 'exit'.")
            except Exception as e:
                logging.error(f"Erreur dans la boucle principale: {str(e)}")
                if self.debug:
                    import traceback
                    traceback.print_exc()
                if HAS_RICH:
                    self.console.print(f"[bold red]Erreur:[/bold red] {str(e)}")
                else:
                    print(f"Erreur: {str(e)}")

def main():
    """Fonction principale"""
    parser = argparse.ArgumentParser(description="Agent IA Mistral pour terminal Linux")
    parser.add_argument("--lang", "-l", choices=["fr", "en"], default="fr", help="Langue de l'agent (fr/en)")
    parser.add_argument("--debug", "-d", action="store_true", help="Mode debug")
    parser.add_argument("--scripts-dir", "-s", help="R√©pertoire pour les scripts g√©n√©r√©s")
    args = parser.parse_args()
    
    # Configuration du r√©pertoire des scripts si sp√©cifi√©
    if args.scripts_dir:
        global SCRIPTS_DIR
        SCRIPTS_DIR = os.path.expanduser(args.scripts_dir)
    
    # Cr√©ation du r√©pertoire des scripts s'il n'existe pas
    os.makedirs(SCRIPTS_DIR, exist_ok=True)
    
    # D√©marrage de l'agent
    agent = MistralAgent(language=args.lang, debug=args.debug)
    agent.run()

if __name__ == "__main__":
    main()