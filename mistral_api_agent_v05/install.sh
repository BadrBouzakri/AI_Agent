#!/bin/bash

# Script d'installation pour l'agent DevOps CLI
# Ce script installe les d√©pendances n√©cessaires et configure l'agent

set -e

echo "ü§ñ Installation de l'agent DevOps CLI..."

# V√©rifier si Python est install√©
if ! command -v python3 &> /dev/null; then
    echo "‚ùå Python 3 n'est pas install√©. Installation en cours..."
    sudo apt update
    sudo apt install -y python3 python3-pip
else
    echo "‚úÖ Python 3 est d√©j√† install√©"
fi

# Cr√©er un environnement virtuel pour l'agent
AGENT_DIR="$HOME/.devops_cli_agent"
mkdir -p "$AGENT_DIR"

echo "üìÅ Cr√©ation de l'environnement virtuel..."
python3 -m venv "$AGENT_DIR/venv"
source "$AGENT_DIR/venv/bin/activate"

# Installer les d√©pendances
echo "üì¶ Installation des d√©pendances..."
pip install requests

# Cr√©er le r√©pertoire pour les scripts
SCRIPTS_DIR="$HOME/tech/scripts"
mkdir -p "$SCRIPTS_DIR"
echo "üìÅ R√©pertoire de scripts cr√©√©: $SCRIPTS_DIR"

# T√©l√©charger le script agent.py
echo "üì• T√©l√©chargement de l'agent..."
cat > "$AGENT_DIR/agent.py" << 'EOF'
#!/usr/bin/env python3
"""
DevOps CLI Agent - Assistant intelligent pour l'administration syst√®me et DevOps
Version am√©lior√©e bas√©e sur le code Mistral Agent
"""

import os
import sys
import subprocess
import json
import re
import signal
import shlex
import logging
import readline
import requests
from datetime import datetime
import time
import shutil

# Configuration
MISTRAL_API_KEY = "n46jy69eatOFdxAI7Rb0PXsj6jrVv16K"
MISTRAL_API_URL = "https://api.mistral.ai/v1/chat/completions"
MISTRAL_MODEL = "mistral-large-latest"  # Utilisation du dernier mod√®le disponible
COMMAND_HISTORY = []
HISTORY_FILE = os.path.expanduser("~/.devops_agent_history.json")
LOG_FILE = os.path.expanduser("~/.devops_agent_logs.log")
SCRIPTS_DIR = os.path.expanduser("~/tech/scripts")
MAX_HISTORY_ENTRIES = 20
TERMINAL_WIDTH = shutil.get_terminal_size().columns
VERSION = "1.0.1"
DANGEROUS_COMMANDS = ["rm", "mv", "dd", "mkfs", "fdisk", ">", "2>", "truncate", "rmdir", "pkill", "kill"]

# Configuration du logging
logging.basicConfig(
    filename=LOG_FILE,
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# Couleurs pour le terminal
BLUE = "\033[94m"
GREEN = "\033[92m"
YELLOW = "\033[93m"
RED = "\033[91m"
BOLD = "\033[1m"
RESET = "\033[0m"

def print_banner():
    """Affiche la banni√®re de l'agent DevOps"""
    banner = f"""
{BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë {BOLD}DevOps CLI Agent v{VERSION}{RESET}{BLUE}                                          ‚ïë
‚ïë {YELLOW}Assistant intelligent pour l'administration syst√®me et DevOps{RESET}{BLUE}       ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù{RESET}
"""
    print(banner)

def signal_handler(sig, frame):
    """G√®re l'interruption propre du programme"""
    print(f"\n\n{YELLOW}Session termin√©e. √Ä bient√¥t !{RESET}")
    save_history()
    sys.exit(0)

signal.signal(signal.SIGINT, signal_handler)

def load_history():
    """Charge l'historique des interactions"""
    if os.path.exists(HISTORY_FILE):
        try:
            with open(HISTORY_FILE, 'r', encoding='utf-8') as f:
                history = json.load(f)
                return history
        except Exception as e:
            logging.error(f"Erreur lors du chargement de l'historique: {e}")
    return []

def save_history():
    """Sauvegarde l'historique des interactions"""
    if len(COMMAND_HISTORY) > 0:
        try:
            # Limiter la taille de l'historique
            history_to_save = COMMAND_HISTORY[-MAX_HISTORY_ENTRIES:] if len(COMMAND_HISTORY) > MAX_HISTORY_ENTRIES else COMMAND_HISTORY
            with open(HISTORY_FILE, 'w', encoding='utf-8') as f:
                json.dump(history_to_save, f, ensure_ascii=False, indent=2)
        except Exception as e:
            logging.error(f"Erreur lors de la sauvegarde de l'historique: {e}")

def is_dangerous_command(command):
    """V√©rifie si une commande est potentiellement dangereuse"""
    try:
        command_parts = shlex.split(command)
        if not command_parts:
            return False
            
        base_cmd = command_parts[0]
        
        # V√©rifier les commandes dangereuses directes
        if base_cmd in DANGEROUS_COMMANDS:
            return True
            
        # V√©rifier les redirections et pipes dangereux
        if ">" in command or "|" in command and ("rm" in command or "mv" in command):
            return True
            
        # V√©rifier les options dangereuses sp√©cifiques
        if base_cmd == "rm" and "-rf" in command_parts:
            return True
    except:
        # En cas d'erreur dans l'analyse, consid√©rer comme potentiellement dangereux
        return True
            
    return False

def send_to_mistral(prompt, system_message, conversation_history=None):
    """Envoie une requ√™te √† l'API Mistral avec gestion de l'historique de conversation"""
    headers = {
        "Content-Type": "application/json",
        "Accept": "application/json",
        "Authorization": f"Bearer {MISTRAL_API_KEY}"
    }
    
    # Pr√©paration des messages
    messages = [
        {"role": "system", "content": system_message}
    ]
    
    # Ajout de l'historique de conversation si fourni
    if conversation_history:
        for entry in conversation_history:
            messages.append(entry)
    
    # Ajout du message utilisateur actuel
    messages.append({"role": "user", "content": prompt})
    
    data = {
        "model": MISTRAL_MODEL,
        "messages": messages,
        "temperature": 0.3,  # Temp√©rature plus basse pour des r√©ponses plus coh√©rentes
        "max_tokens": 2048
    }
    
    try:
        logging.info(f"Envoi de requ√™te √† l'API Mistral: {prompt[:100]}...")
        response = requests.post(MISTRAL_API_URL, headers=headers, json=data)
        response.raise_for_status()  # L√®ve une exception pour les erreurs HTTP
        
        return response.json()["choices"][0]["message"]["content"], messages
    except requests.exceptions.HTTPError as e:
        logging.error(f"Erreur HTTP lors de la communication avec l'API Mistral: {e}")
        error_detail = f"Code: {e.response.status_code}, Message: {e.response.text}" if hasattr(e, 'response') else str(e)
        return f"Erreur HTTP: {error_detail}", messages
    except requests.exceptions.ConnectionError:
        logging.error("Erreur de connexion √† l'API Mistral")
        return "Erreur de connexion √† l'API Mistral. V√©rifiez votre connexion internet.", messages
    except requests.exceptions.Timeout:
        logging.error("Timeout lors de la connexion √† l'API Mistral")
        return "Timeout lors de la connexion √† l'API Mistral. R√©essayez plus tard.", messages
    except Exception as e:
        logging.error(f"Erreur inattendue lors de la communication avec l'API Mistral: {e}")
        return f"Erreur inattendue: {str(e)}", messages

def execute_command(command, cwd=None):
    """Ex√©cute une commande shell et retourne la sortie"""
    try:
        # Ajout de la commande √† l'historique
        COMMAND_HISTORY.append(command)
        
        # V√©rification si c'est une commande dangereuse
        if is_dangerous_command(command):
            confirm = input(f"{YELLOW}‚ö†Ô∏è Commande potentiellement dangereuse: {command}\nConfirmer l'ex√©cution? (oui/non) >{RESET} ")
            if confirm.lower() not in ['oui', 'o', 'yes', 'y']:
                return True, "Ex√©cution annul√©e."
        
        # Ex√©cution de la commande dans le r√©pertoire sp√©cifi√© ou courant
        result = subprocess.run(command, shell=True, text=True, capture_output=True, cwd=cwd)
        
        if result.returncode == 0:
            return True, result.stdout
        else:
            return False, result.stderr
    except Exception as e:
        logging.error(f"Erreur lors de l'ex√©cution de la commande {command}: {e}")
        return False, str(e)

def paginate_output(text):
    """Pagine la sortie dans le terminal"""
    lines = text.split('\n')
    terminal_height = shutil.get_terminal_size().lines - 4
    
    if len(lines) <= terminal_height:
        print(text)
        return
    
    for i in range(0, len(lines), terminal_height):
        chunk = lines[i:i + terminal_height]
        print('\n'.join(chunk))
        
        if i + terminal_height < len(lines):
            input(f"{YELLOW}Appuyez sur Entr√©e pour continuer...{RESET}")

def show_history():
    """Affiche l'historique des commandes"""
    if not COMMAND_HISTORY:
        print(f"{YELLOW}Aucune commande ex√©cut√©e durant cette session.{RESET}")
        return
    
    print(f"{BLUE}=== Historique des commandes ==={RESET}")
    for i, cmd in enumerate(COMMAND_HISTORY, 1):
        print(f"{i}. {cmd}")

def generate_system_prompt():
    """G√©n√®re le prompt syst√®me pour l'API Mistral"""
    system_message = """
Tu es un agent intelligent sp√©cialis√© en administration syst√®mes et DevOps, con√ßu pour assister un administrateur exp√©riment√© directement depuis un terminal Ubuntu 24.04. Tu interagis uniquement via la ligne de commande.
Tu dois :
- Comprendre les requ√™tes de l'utilisateur comme un assistant shell intelligent.
- Fournir des commandes shell (bash) pr√©cises pour :
  - G√©rer les utilisateurs, groupes, droits, services, packages, logs.
  - Travailler avec les conteneurs Docker / pods Kubernetes.
  - D√©ployer et superviser des applications (CI/CD, monitoring, infrastructure).
  - Cr√©er, modifier, supprimer des fichiers et r√©pertoires.
  - Modifier la configuration r√©seau, firewalls, services (systemd, Nginx, etc).
- Expliquer chaque action avant de l'ex√©cuter.
- Attendre une confirmation explicite (`oui/non`) avant d'ex√©cuter toute commande.
- R√©pondre de mani√®re concise et technique, comme un assistant Linux professionnel.
- Afficher les sorties des commandes de mani√®re lisible dans le terminal (pagination si besoin).
- Garder un historique des commandes ex√©cut√©es durant la session.
- Proposer automatiquement des optimisations ou s√©curisations apr√®s chaque t√¢che.

Contexte :
- Tu travailles exclusivement sur ce terminal local.
- L'utilisateur est un administrateur DevOps exp√©riment√©.
- Tu dois r√©pondre en fran√ßais technique, sauf si on te demande l'anglais.

Limites :
- Pas d'interface graphique.
- Pas de g√©n√©ration de contenu inutile.
- Toujours demander validation avant modification.

Format de r√©ponse :
1. **R√©sum√© de la t√¢che**
2. **Commande(s) propos√©e(s)**
3. **Attente de confirmation**
4. **Ex√©cution avec sortie**
5. **Conseils ou questions suivantes**

N'utilise pas de Markdown. Formate ta r√©ponse pour un affichage dans un terminal texte.
"""
    return system_message

def get_system_info():
    """R√©cup√®re des informations syst√®me basiques"""
    try:
        # R√©cup√©ration de la version d'Ubuntu
        with open('/etc/os-release', 'r') as f:
            os_info = f.read()
            ubuntu_version = re.search(r'VERSION="(.*)"', os_info)
            if ubuntu_version:
                ubuntu_version = ubuntu_version.group(1)
            else:
                ubuntu_version = "Version inconnue"
        
        # R√©cup√©ration du nom d'h√¥te
        hostname = subprocess.check_output("hostname", shell=True).decode().strip()
        
        # R√©cup√©ration de l'utilisateur
        username = subprocess.check_output("whoami", shell=True).decode().strip()
        
        return f"Ubuntu {ubuntu_version} | H√¥te: {hostname} | Utilisateur: {username}"
    except Exception as e:
        logging.error(f"Erreur lors de la r√©cup√©ration des infos syst√®me: {e}")
        return "Informations syst√®me non disponibles"

def save_script(script_content, filename=None):
    """Sauvegarde un script dans le r√©pertoire des scripts"""
    # Cr√©ation du r√©pertoire des scripts si n√©cessaire
    os.makedirs(SCRIPTS_DIR, exist_ok=True)
    
    # G√©n√©ration d'un nom de fichier unique si non sp√©cifi√©
    if not filename:
        timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
        filename = f"script_{timestamp}.sh"
    
    # Chemin complet du fichier
    filepath = os.path.join(SCRIPTS_DIR, filename)
    
    try:
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(script_content)
        
        # Rendre le script ex√©cutable
        os.chmod(filepath, 0o755)
        
        logging.info(f"Script sauvegard√©: {filepath}")
        return filepath
    except Exception as e:
        logging.error(f"Erreur lors de la sauvegarde du script: {e}")
        return None

def main():
    """Fonction principale de l'agent"""
    print_banner()
    
    # Cr√©er le r√©pertoire des scripts s'il n'existe pas
    os.makedirs(SCRIPTS_DIR, exist_ok=True)
    
    system_info = get_system_info()
    print(f"{GREEN}Syst√®me: {system_info}{RESET}")
    print(f"{YELLOW}Tapez 'exit' ou 'quit' pour quitter, 'history' pour voir l'historique des commandes.{RESET}\n")
    
    system_prompt = generate_system_prompt()
    conversation_history = []
    
    # Charger l'historique des commandes
    global COMMAND_HISTORY
    COMMAND_HISTORY = load_history()
    
    while True:
        try:
            user_input = input(f"{BOLD}{BLUE}DevOps CLI Agent >{RESET} ")
            
            if user_input.lower() in ['exit', 'quit']:
                print(f"{YELLOW}Session termin√©e. √Ä bient√¥t !{RESET}")
                save_history()
                break
                
            if user_input.lower() == 'history':
                show_history()
                continue
                
            if user_input.lower() == 'clear':
                os.system('clear' if os.name == 'posix' else 'cls')
                continue
                
            if not user_input.strip():
                continue
            
            # Gestion sp√©ciale pour les commandes simples (pour plus de r√©activit√©)
            if user_input.lower() in ['ls', 'pwd', 'whoami', 'hostname']:
                success, output = execute_command(user_input)
                if success:
                    print(output)
                else:
                    print(f"{RED}Erreur: {output}{RESET}")
                continue
            
            # Enrichissement du contexte utilisateur
            enriched_input = f"Requ√™te: {user_input}\nContexte syst√®me: {system_info}"
            
            # Envoi de la requ√™te √† l'API Mistral
            print(f"{YELLOW}Analyse en cours...{RESET}")
            response, updated_messages = send_to_mistral(enriched_input, system_prompt, conversation_history)
            
            # Mise √† jour de l'historique de conversation (limit√© pour √©conomiser des tokens)
            if len(updated_messages) > 3:  # On garde le message syst√®me + les 2 derniers √©changes
                conversation_history = [updated_messages[0]] + updated_messages[-4:]
            else:
                conversation_history = updated_messages
            
            # Traitement de la r√©ponse
            print("\n" + "=" * TERMINAL_WIDTH)
            print(response)
            print("=" * TERMINAL_WIDTH + "\n")
            
            # Attente de la confirmation de l'utilisateur si une commande est propos√©e
            if "Souhaitez-vous ex√©cuter ces commandes? (oui/non)" in response:
                confirmation = input(f"{YELLOW}Confirmez l'ex√©cution (oui/non) >{RESET} ")
                
                if confirmation.lower() in ['oui', 'o', 'yes', 'y']:
                    # Extraction des commandes √† partir de la r√©ponse
                    commands_section = re.search(r"Commande\(s\) propos√©e\(s\):(.*?)Souhaitez-vous", response, re.DOTALL)
                    
                    if commands_section:
                        commands_text = commands_section.group(1).strip()
                        
                        # D√©tection des scripts multilignes (avec d√©limiteurs)
                        script_match = re.search(r"cat\s+>\s+(\S+)\s+<<\s*['\"](.*?)['\"](.+?)\2", commands_text, re.DOTALL)
                        if script_match:
                            # C'est un script √† enregistrer
                            script_file = script_match.group(1)
                            script_content = script_match.group(3)
                            
                            # Sauvegarde du script
                            script_name = os.path.basename(script_file)
                            saved_path = save_script(script_content, script_name)
                            
                            if saved_path:
                                print(f"{GREEN}Script sauvegard√©: {saved_path}{RESET}")
                                
                                # Demander d'ex√©cuter le script
                                run_script = input(f"{YELLOW}Voulez-vous ex√©cuter ce script? (oui/non) >{RESET} ")
                                if run_script.lower() in ['oui', 'o', 'yes', 'y']:
                                    success, output = execute_command(f"bash {saved_path}")
                                    if success:
                                        paginate_output(output)
                                    else:
                                        print(f"{RED}Erreur: {output}{RESET}")
                        else:
                            # Extraire les commandes individuelles (ignorer les commentaires)
                            commands = []
                            for line in commands_text.split('\n'):
                                line = line.strip()
                                if line and not line.startswith('#'):
                                    commands.append(line)
                            
                            print(f"{BLUE}=== Ex√©cution des commandes ==={RESET}")
                            for cmd in commands:
                                print(f"{GREEN}$ {cmd}{RESET}")
                                success, output = execute_command(cmd)
                                
                                if success:
                                    paginate_output(output)
                                else:
                                    print(f"{RED}Erreur: {output}{RESET}")
                            
                            print(f"{GREEN}Ex√©cution termin√©e.{RESET}")
                    else:
                        print(f"{RED}Impossible d'extraire les commandes de la r√©ponse.{RESET}")
                else:
                    print(f"{YELLOW}Ex√©cution annul√©e.{RESET}")
            
        except KeyboardInterrupt:
            print(f"\n{YELLOW}Op√©ration annul√©e. Pour quitter, tapez 'exit' ou 'quit'.{RESET}")
            continue
        except Exception as e:
            logging.error(f"Erreur dans la boucle principale: {str(e)}")
            print(f"{RED}Erreur: {str(e)}{RESET}")

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        logging.error(f"Erreur critique: {str(e)}")
        print(f"{RED}Erreur critique: {str(e)}\nConsultez le fichier de log pour plus de d√©tails: {LOG_FILE}{RESET}")
    finally:
        save_history()
EOF

# Rendre l'agent ex√©cutable
chmod +x "$AGENT_DIR/agent.py"

# Cr√©er un script d'ex√©cution
cat > "$AGENT_DIR/run.sh" << 'EOF'
#!/bin/bash
source "$HOME/.devops_cli_agent/venv/bin/activate"
python3 "$HOME/.devops_cli_agent/agent.py" "$@"
EOF

chmod +x "$AGENT_DIR/run.sh"

# Cr√©er un alias pour l'agent
SHELL_CONFIG="$HOME/.bashrc"
if [ -f "$HOME/.zshrc" ]; then
    SHELL_CONFIG="$HOME/.zshrc"
fi

# V√©rifier si l'alias existe d√©j√†
if ! grep -q "alias devops=" "$SHELL_CONFIG"; then
    echo "üîß Ajout de l'alias 'devops' √† $SHELL_CONFIG..."
    echo "" >> "$SHELL_CONFIG"
    echo "# Agent DevOps CLI" >> "$SHELL_CONFIG"
    echo "alias devops='$AGENT_DIR/run.sh'" >> "$SHELL_CONFIG"
    echo 'export PATH="$PATH:$HOME/tech/scripts"' >> "$SHELL_CONFIG"
else
    echo "‚úÖ L'alias 'devops' existe d√©j√† dans $SHELL_CONFIG"
fi

# Cr√©er un lien symbolique dans /usr/local/bin
echo "üîó Cr√©ation d'un lien symbolique pour l'agent..."
if [ -w "/usr/local/bin" ]; then
    sudo ln -sf "$AGENT_DIR/run.sh" /usr/local/bin/devops
else
    echo "‚ö†Ô∏è Impossible de cr√©er le lien symbolique dans /usr/local/bin (besoin de droits sudo)"
    echo "   Vous pouvez utiliser l'alias 'devops' apr√®s avoir recharg√© votre shell"
fi

echo ""
echo "‚úÖ Installation termin√©e!"
echo "üöÄ Pour d√©marrer l'agent, vous pouvez:"
echo "   1. Recharger votre shell avec 'source $SHELL_CONFIG' puis utiliser la commande 'devops'"
echo "   2. Ou ex√©cuter directement '$AGENT_DIR/run.sh'"
echo ""
echo "üìÇ R√©pertoire des scripts: $SCRIPTS_DIR"
echo ""
echo "üìã Commandes utiles:"
echo "   'exit' ou 'quit'     : Quitter l'agent"
echo "   'history'            : Afficher l'historique des commandes"
echo "   'clear'              : Effacer l'√©cran"
echo ""

# Recharger le shell si possible
if [[ "$0" = "$BASH_SOURCE" ]]; then
    echo "Rechargement du shell..."
    exec "$SHELL"
fi